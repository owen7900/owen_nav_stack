cmake_minimum_required(VERSION 3.8)
project(expand_to_goal_costmap_plugin)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake_ros REQUIRED)
find_package(pluginlib REQUIRED)
find_package(nav2_costmap_2d REQUIRED)
find_package(rclcpp REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(laser_geometry REQUIRED)
find_package(map_msgs REQUIRED)
find_package(message_filters REQUIRED)
find_package(nav2_common REQUIRED)
find_package(nav2_msgs REQUIRED)
find_package(nav2_util)
find_package(nav2_voxel_grid REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(pluginlib REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(rmw REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_sensor_msgs REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(angles REQUIRED)

set(dependencies
  geometry_msgs
  laser_geometry
  map_msgs
  message_filters
  nav2_msgs
  nav2_util
  nav2_voxel_grid
  nav_msgs
  pluginlib
  rclcpp
  rclcpp_lifecycle
  sensor_msgs
  std_msgs
  tf2
  tf2_geometry_msgs
  tf2_ros
  tf2_sensor_msgs
  visualization_msgs
  angles
  nav2_costmap_2d
)

add_library(expand_to_goal_costmap_plugin SHARED
        src/expand_to_goal_costmap_plugin.cpp)

target_compile_features(expand_to_goal_costmap_plugin PUBLIC c_std_99 cxx_std_17) 

target_include_directories(expand_to_goal_costmap_plugin PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
ament_target_dependencies(
  expand_to_goal_costmap_plugin
  "pluginlib"
  "nav2_costmap_2d"
  "rclcpp"
)

ament_target_dependencies(expand_to_goal_costmap_plugin 
    ${dependencies}
)

#target_link_libraries(expand_to_goal_costmap_plugin
    #nav2_costmap_2d_core
  #)
# Causes the visibility macros to use dllexport rather than dllimport,
# which is appropriate when building the dll but not consuming it.
target_compile_definitions(expand_to_goal_costmap_plugin PRIVATE "EXPAND_TO_GOAL_COSTMAP_PLUGIN_BUILDING_LIBRARY")

install(
  DIRECTORY include
  DESTINATION include
)
install(
  TARGETS expand_to_goal_costmap_plugin
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()
pluginlib_export_plugin_description_file(nav2_costmap_2d expand_to_goal.xml)
ament_export_include_directories(
        include
)
ament_export_libraries(
  expand_to_goal_costmap_plugin
)
ament_export_targets(
  export_${PROJECT_NAME}
)

ament_package()
